import telebot
from telebot import types

# –í–∞—à token
TOKEN = '7852016424:AAHk7a13d5PQugtx7QQTV-MQ7SwRllj0sYQ'
bot = telebot.TeleBot(TOKEN)

# –§–æ—Ç–æ-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ü–ö
PC_IMAGE_URL = "https://i.ibb.co/84R3dKpV/20250130-234347.jpg"

# –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
user_messages = {}
selected_components = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_previous_messages(chat_id):
    if chat_id in user_messages:
        for msg_id in user_messages[chat_id]:
            try:
                bot.delete_message(chat_id, msg_id)
            except:
                pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        user_messages[chat_id] = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
def send_message_and_track(chat_id, text, reply_markup=None, photo=None):
    delete_previous_messages(chat_id)
    if photo:
        msg = bot.send_photo(chat_id, photo, caption=text, reply_markup=reply_markup)
    else:
        msg = bot.send_message(chat_id, text, reply_markup=reply_markup)
    user_messages.setdefault(chat_id, []).append(msg.message_id)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start', 'menu'])
def main_menu(message):
    delete_previous_messages(message.chat.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìå –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü–ö", "‚öôÔ∏è –°–æ–±—Ä–∞—Ç—å –ü–ö", "üßæ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç", "‚ùå –í—ã–π—Ç–∏")
    send_message_and_track(message.chat.id, "üíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ü–ö! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ö–∞—Ç–∞–ª–æ–≥ –ü–ö
@bot.message_handler(func=lambda message: message.text == "üìå –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü–ö")
def show_pcs(message):
    delete_previous_messages(message.chat.id)

    markup = types.InlineKeyboardMarkup()
    for i in range(1, 5):
        markup.add(types.InlineKeyboardButton(f"üñ• –ö–æ–º–ø {i}", callback_data=f"pc_{i}"))

    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    send_message_and_track(message.chat.id, "üíª –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä:", reply_markup=markup)

# –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö
PC_DATA = {
    "pc_1": {"price": "30,000‚ÇΩ", "specs": "Intel i3, 8GB RAM, GTX 1050 Ti, 256GB SSD"},
    "pc_2": {"price": "32,000‚ÇΩ", "specs": "Intel i5, 8GB RAM, GTX 1650, 512GB SSD"},
    "pc_3": {"price": "36,000‚ÇΩ", "specs": "AMD Ryzen 5, 16GB RAM, GTX 1660, 512GB SSD"},
    "pc_4": {"price": "40,000‚ÇΩ", "specs": "Intel i5, 16GB RAM, RTX 3050, 1TB HDD + 256GB SSD"},
}

# –í—ã–±–æ—Ä –ü–ö
@bot.callback_query_handler(func=lambda call: call.data.startswith("pc_"))
def show_pc_details(call):
    delete_previous_messages(call.message.chat.id)

    pc = PC_DATA[call.data]
    text = f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä\nüí∞ –¶–µ–Ω–∞: {pc['price']}\n‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {pc['specs']}"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_pcs"))

    send_message_and_track(call.message.chat.id, text, reply_markup=markup, photo=PC_IMAGE_URL)

# –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –ü–ö
@bot.callback_query_handler(func=lambda call: call.data == "back_to_pcs")
def back_to_pcs(call):
    show_pcs(call.message)

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    main_menu(call.message)

# –ü–æ–∫—É–ø–∫–∞ –ü–ö
@bot.callback_query_handler(func=lambda call: call.data == "buy")
def buy_pc(call):
    delete_previous_messages(call.message.chat.id)
    send_message_and_track(call.message.chat.id, "üõí –ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

# –†–∞–∑–¥–µ–ª "–°–æ–±—Ä–∞—Ç—å –ü–ö"
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –°–æ–±—Ä–∞—Ç—å –ü–ö")
def build_pc(message):
    delete_previous_messages(message.chat.id)
    selected_components[message.chat.id] = {}

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üñ• –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", callback_data="select_cpu"),
        types.InlineKeyboardButton("üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞", callback_data="select_gpu"),
        types.InlineKeyboardButton("üíæ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", callback_data="select_ram"),
        types.InlineKeyboardButton("üîß –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É", callback_data="finish_build")
    )
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ —Å–±–æ—Ä–∫–∏", callback_data="cancel_build"))

    send_message_and_track(message.chat.id, "‚öôÔ∏è –î–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä–µ–º –≤–∞—à –ü–ö. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
COMPONENT_OPTIONS = {
    "cpu": ["Intel i5", "AMD Ryzen 5", "Intel i7"],
    "gpu": ["RTX 3060", "GTX 1660", "RTX 3070"],
    "ram": ["8GB DDR4", "16GB DDR4", "32GB DDR4"]
}

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_"))
def select_component(call):
    delete_previous_messages(call.message.chat.id)
    component_type = call.data.split("_")[1]

    markup = types.InlineKeyboardMarkup()
    for option in COMPONENT_OPTIONS.get(component_type, []):
        markup.add(types.InlineKeyboardButton(option, callback_data=f"chosen_{component_type}_{option}"))

    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_build"))
    send_message_and_track(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ {component_type.upper()}:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("chosen_"))
def component_chosen(call):
    delete_previous_messages(call.message.chat.id)
    component_type, component_name = call.data.split("_")[1:]
    selected_components[call.message.chat.id][component_type] = component_name
    send_message_and_track(call.message.chat.id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {component_name}")
    build_pc(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_build")
def cancel_build(call):
    delete_previous_messages(call.message.chat.id)
    selected_components.pop(call.message.chat.id, None)
    send_message_and_track(call.message.chat.id, "‚ùå –°–±–æ—Ä–∫–∞ –ü–ö –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    main_menu(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "finish_build")
def finish_build(call):
    delete_previous_messages(call.message.chat.id)
    components = selected_components.get(call.message.chat.id, {})
    if not components:
        send_message_and_track(call.message.chat.id, "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.")
        return build_pc(call.message)

    result = "\n".join([f"{key.upper()}: {value}" for key, value in components.items()])
    send_message_and_track(call.message.chat.id, f"üîß –í–∞—à–∞ —Å–±–æ—Ä–∫–∞ –ü–ö:\n{result}\nüí∞ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –±—é–¥–∂–µ—Ç –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.")
    main_menu(call.message)

# –†–∞—Å—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞
@bot.message_handler(func=lambda message: message.text == "üßæ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç")
def calculate_budget(message):
    delete_previous_messages(message.chat.id)
    components = selected_components.get(message.chat.id, {})
    prices = {
        "Intel i5": 10000, "AMD Ryzen 5": 12000, "Intel i7": 15000,
        "RTX 3060": 30000, "GTX 1660": 20000, "RTX 3070": 40000,
        "8GB DDR4": 4000, "16GB DDR4": 7000, "32GB DDR4": 12000
    }

    total = sum(prices.get(component, 0) for component in components.values())
    if total == 0:
        send_message_and_track(message.chat.id, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞.")
        return main_menu(message)

    send_message_and_track(message.chat.id, f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–±–æ—Ä–∫–∏: {total}‚ÇΩ")

# –í—ã—Ö–æ–¥
@bot.message_handler(func=lambda message: message.text == "‚ùå –í—ã–π—Ç–∏")
def exit_bot(message):
    delete_previous_messages(message.chat.id)
    send_message_and_track(message.chat.id, "üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
